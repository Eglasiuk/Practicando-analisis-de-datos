{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Analizando una base de datos de marketing",
    "\n",
    "This is a notebook for the medium article [Creating conditional columns on Pandas with Numpy select() and where() methods](https://bindichen.medium.com/creating-conditional-columns-on-pandas-with-numpy-select-and-where-methods-8ee6e2dbd5d5)\n",
    "\n",
    "Please check out article for instructions\n",
    "\n",
    "**License**: [BSD 2-Clause](https://opensource.org/licenses/BSD-2-Clause)"
   ]
# ==============================================================================
from google.colab import output
# Tratamiento de datos
# ==============================================================================
import numpy as np
import pandas as pd
import statsmodels.api as sm
import statsmodels.stats.api as sms
import scipy as sc
import datetime as dt

# Gráficos
# ==============================================================================
import matplotlib.pyplot as plt
import matplotlib.font_manager
from matplotlib import style
style.use('ggplot') or plt.style.use('ggplot')
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.graph_objects as go
import seaborn as sns

!pip install pandas-profiling==3.0.0
import pandas_profiling as pp

# Preprocesado y modelado
# ==============================================================================
from sklearn.decomposition import PCA
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import scale
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans


# ==============================================================================
#marketing
url = "https://docs.google.com/spreadsheets/d/1kAlBt-8nVL1a8noGFr9Fm5pw8L63Gaev/edit?usp=sharing&ouid=103711512915088173781&rtpof=true&sd=true"

path = 'https://drive.google.com/uc?export=download&id=' + url.split('/')[-2]
df = pd.read_excel(path)


# ==============================================================================
#Analisis exploratorio
df.shape
df.head(10)
df.info()
print(f"\n{'-'*50}\n\nVariables:\n")
df.dtypes
# Faltan algunos incomes

df.describe()

# Corregir nombre de la Columnas 'Income'
df.rename(columns={' Income ':'Income'}, inplace=True)

# No hay aparentes repeticiones ni errores en las columnas de texto, aunque anda a saber que hay adentro de Marital_Status
print(df['Education'].unique())
print(df['Marital_Status'].unique())
print(df['Country'].unique())

## 2n Cycle es como un masters aparentemente. Sistema bologna. Sobre esto puedo hacer el cluster
df=df.replace({'2n Cycle':'Master'})
df['Education'].unique()

# Cambio de códcos de paises por nombre completo

ISO = { 'SA' : 'Saudi Arabia', 'CA' : 'Canada', 'SP' : 'Spain', 'GER' : 'Germany', 'IND' : 'India', 'US' : 'United States', 'AUS' : 'Australia', 'ME' : 'Montenegro'}
df = df.replace({'Country':ISO})

df['Education']= pd.Categorical(df['Education'],categories=df['Education'].unique())
df['Marital_Status']= pd.Categorical(df['Marital_Status'],categories=df['Marital_Status'].unique())
df['Country']= pd.Categorical(df['Country'],categories=df['Country'].unique())
# ==============================================================================
#FECHAS Y ANIOS 
# Buscar los años de nacimiento problematicos (min Year_Birth =1893)
df_year=df[df['Year_Birth']<1940]
df_year


# Como en 2015 alguien nacido en 1900 tendría 115 y no parece ser un simple error de entrada (quien confunde 2000 con 1900?) los dropeo y reseteo el index
df=df.drop([232,1578,2205])
df['index']=[i for i in range (0,2237)]
df=df.set_index('index')
df

# Convertir la columna 'Dt_Customer' a fecha - Habría que revisar bien, pero me pareció que lo hacia correctamente
df['Dt_Customer']=pd.to_datetime(df['Dt_Customer'],dayfirst=True)
df

# Para ver de que en el 2015 parecía la fecha en que se saco la base da datos
max(df['Dt_Customer'])

# Crear dos colmunas, de días desde que es cliente y edad

df['Days_Customer']=(dt.datetime(2015,1,1)-df['Dt_Customer']).dt.days
df['Age']=[2015-i for i in df['Year_Birth']]
df

# Reorganizar las columnas del dataframe (debe haber una forma mas elegante de hacer lo mismo)
clist=list(df.columns)
clist.insert(2,df.columns[29])
clist.insert(9,df.columns[28])
clist.pop()
clist.pop()
df=df[clist]
df

# ==============================================================================
#FAMILIAS
# Agrupamos la variable : maritial staus, kidhome, teen home. Para buscar el numero total de miembros de la familia.
# Tomamos como Married y together como 2 personas que viven juntos, por eso creamos una nueva variable cupleSize.

cupleSize= []
n=0
for F in df.Marital_Status:
  if F == "Married" or F=="Together" :
    cupleSize.append(2)
  else: 
    cupleSize.append( 1)

df.insert(loc=5, column='cupleSize', value=cupleSize)

df.head(10)

# Creamos la variable familySize como suma de las otras columnas

familySize= df.cupleSize + df.Kidhome + df.Teenhome
df.insert(loc=9, column='familySize', value=familySize)

# Creamos una nueva columna con el monto total 
MntTotal = df.MntFishProducts + df.MntFruits + df.MntGoldProds + df.MntMeatProducts + df.MntWines
df.insert(loc=13, column='MntTotal', value = MntTotal)

# Modificamos el marital_status

df = df.replace({'YOLO':'Single', 'Absurd':'Single', 'Alone':'Single'})

# ============================================================================== Final
